<!-- Done just when the server start, shared across users-->
```{r}
#| context: server-start

suppressPackageStartupMessages(library(bslib))
suppressPackageStartupMessages(library(leaflet))
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(arrow))
source("R/image-gallery.R")
source("R/occurrence.R")
source("R/value_boxes.R")
source("R/Species_by_site_abundance.R")
source("R/get_species_information.R")
source("R/taxonomy_figures.R")
source("R/species_diversity.R")
source("R/get_dna_statistics.R")
source("extensions/front-gallery.R")
#source("R/fix_taxonomy.R")

# Small function to debug, when not in use set show=FALSE
mdebug <- function(status, show = FALSE) {if(show) message(status)}

sites_info <- read.table("data/sites_description.txt", header=T)
#occurrence <- read_occurrence_data()

message("Opening occurrence dataset...")
occurrence_ds <- open_dataset("data/output/occurrence.parquet")

unique_sp_codes <- occurrence_ds %>%
  select(scientificName, scientificNameID) %>%
  group_by(scientificName, scientificNameID) %>%
  distinct() %>%
  collect() %>%
  mutate(scientificNameID = sub(".*:", "", scientificNameID)) %>% 
  ungroup()

# Leaflet map data
# TODO: pre-do that
message("Fetching sites metadata...")
sites <- jsonlite::read_json("https://raw.githubusercontent.com/iobis/edna-tracker-data/data/generated.json")
sites_list <- sites$sites
sites_samples <- sites$samples %>% bind_rows()

sites_names <- sapply(sites_list, function(x) x$name)
sites_names <- sites_names[sites_names != "Sanganeb Marine National Park and Dungonab Bay â€“ Mukkawar Island Marine National Park"]
sites_names <- sites_names[order(sites_names)]

samples <- sites_samples %>% 
  select(site = parent_area_name, name, blank, date = event_begin, station, volume = size)
samples$concentration <- sapply(sites_samples$dnas, function(x) x$concentration)

localities <- sites_samples %>% 
  select(area_name, area_locality, parent_area_name, station, lon = area_longitude, lat = area_latitude) %>%
  group_by(area_name, area_locality, parent_area_name, station, lon, lat) %>%
  distinct(.keep_all = T) %>% 
  ungroup()

map_localities <- sites_samples %>% 
  select(name, area_name, area_locality, parent_area_name, station, lon = area_longitude, lat = area_latitude) %>%
  group_by(name, area_name, area_locality, parent_area_name, station, lon, lat) %>%
  distinct(.keep_all = T) %>%
  mutate(popup_name = paste(name, area_name)) %>% 
  ungroup()

species_context_info <- readRDS("data/fishbase.rds")

general_description <- jsonlite::read_json("data/general_description.json")

sites_shape <- sf::read_sf("https://samples.ednaexpeditions.org/sites.geojson")

climate_species <- open_dataset("data/species_sites_risk_full.parquet")
mdebug("server start done")
```

<!-- Shiny server component -->
```{r}
#| context: server

# HOME page
source("R/home_server.R", local = TRUE)

# Update inputs across pages and according to map
source("R/server_updategeography.R", local = TRUE)

# Image galleries
source("R/species_gallery_modal.R", local = TRUE)

# Update column sizes when not on first page
observe({
  if (input$higherGeography != "") {
    session$sendCustomMessage("show_overlay", "remove")
    session$sendCustomMessage("change_col_sizes", "change")
  } else {
    session$sendCustomMessage("show_overlay", "show")
  }
}) %>%
  bindEvent(input$higherGeography)

observe({
  updateSelectInput(inputId = "higherGeography", selected = "")
}) %>%
  bindEvent(input$homeTrigger)

# Species list gallery ----
species_list <- reactive({
    generate_ordered_species_list_bySite(input$higherGeography, occurrence_ds, input$group, input$iucn)
  })

w <- waiter::Waiter$new(
  id = "species_gallery",
  color = "white",
  html = htmltools::div(
    "Loading image gallery...",
    htmltools::br(), htmltools::br(),
    waiter::spin_1(), style = "color: #2780e3; font-size: 24px; font-weight: 900"
  )
)

wb <- waiter::Waiter$new(
  id = "species_gallery_b",
  color = "white",
  html = htmltools::div(
    "Loading more images...",
    # htmltools::br(), htmltools::br(),
    # waiter::spin_1(),
    style = "color: #2780e3; font-size: 24px; font-weight: 900"
  )
)

sg_limit <- reactive({
  width <- input$dimension[1]
  if (is.null(width)) {
    width <- 1100
  }
  maxw <- floor(width/200)
  maxw * 5
})

gallery_sp_list <- reactive({
  image_table <- data.table::fread("data/proc_images.txt")

  sel_species <- species_list()$scientificName
  existing_species <- image_table[match(sel_species, image_table$species, nomatch = 0),]

  existing_species$species
}) %>%
  bindEvent(species_list()$scientificName)

output$species_gallery <- renderUI({
    req(length(species_list()$scientificName) > 0 && length(sg_limit()) > 0)

    w$show()
    on.exit({
      w$hide()
    })

    if (length(gallery_sp_list()) > sg_limit()) {
      last_name <- "placeholder-tag"

      placeholders <- lapply(1:(sg_limit()/5), function(x) {
        if (x == 1) {
          card(height = "100%", full_screen = F, id = "placeholder-tag",
               card_header("Loading...", style = "font-style: italic;"),
               card_body(tags$img(src = "images/placeholders/general.webp",
                                  class = "gallery-img"), class= "p-0"),
               max_height = "250px", class = "loading"
               )
        } else {
          card(height = "100%", full_screen = F,
               card_header("Loading...", style = "font-style: italic;"),
               card_body(tags$img(src = "images/placeholders/general.webp",
                                  class = "gallery-img"), class= "p-0"),
               max_height = "250px", class = "loading"
               )
        }
      })

      htmltools::div(
        generate_gallery(gallery_sp_list()[1:sg_limit()], "data/proc_images.txt", max_image_height = "250px", max_image_width = "200px", image_gap = "0.1em"),
        layout_column_wrap(id = "gallery-placeholder", width = "200px", gap = "0.1em", fixed_width = TRUE, heights_equal = "row",
      !!!placeholders),
        htmltools::tags$script(
          htmltools::HTML(
            glue::glue(
              '
$(window).on("scroll.checkElement", { passive: true }, function() {
  const element = $("#[last_name]");

  if (element.length) {
    const elementTop = element.offset().top;
    const elementBottom = elementTop + element.outerHeight();
    const viewportTop = $(window).scrollTop();
    const viewportBottom = viewportTop + $(window).height();

    if (elementBottom > viewportTop && elementTop < viewportBottom) {
      console.log("#your-element-id is in view!");
      
      var message = {id: "id1", nonce: Math.random()};
      Shiny.onInputChange("secondGallery", message);
      
      $(window).off("scroll.checkElement");
    }
  }
});
            '
              , .open = "[", .close = "]"
            )
          )
        )
      )
    } else {
      session$sendCustomMessage("second_gallery", "")
      generate_gallery(gallery_sp_list(), "data/proc_images.txt", max_image_height = "250px",max_image_width = "200px", image_gap = "0.1em")
    }
}) %>%
  bindEvent(species_list()$scientificName)

observe({
  if (length(gallery_sp_list()) <= sg_limit()) {
    output$species_gallery_b <- renderUI({htmltools::tags$br()})
  } else {
    wb$show()
    on.exit(wb$hide())
    gallery_b <- generate_gallery(gallery_sp_list()[sg_limit():length(gallery_sp_list())], "data/proc_images.txt", max_image_height = "250px",max_image_width = "200px", image_gap = "0.1em")

    output$species_gallery_b <- renderUI({gallery_b})

    removeUI(
      selector = "#gallery-placeholder"
    )
  }
}) %>%
  bindEvent(input$secondGallery, ignoreInit = TRUE, ignoreNULL = TRUE)

# output$species_gallery_b <- renderUI({
#   if (length(species_list()$scientificName) <= sg_limit()) {
#     htmltools::tags$br()
#   } else {
#     wb$show()
#     on.exit(wb$hide())
#     generate_gallery(species_list()$scientificName[sg_limit():length(species_list()$scientificName)], "data/proc_images.txt", max_image_height = "250px",max_image_width = "200px", image_gap = "0.1em")
#   }
# }) %>%
#   bindEvent(input$secondGallery, ignoreInit = TRUE, ignoreNULL = TRUE)

observe({
  if (!is.null(input$clicked_image_id)) {

    shiny::showModal(shiny::modalDialog(
      htmltools::tags$span("Loading species information...", style = "color: #0277d4; font-size: large;"),
      footer = NULL, easyClose = FALSE))

    species <- gsub("_", " ", gsub("link_", "", input$clicked_image_id))
    species_name <- species
    
    sel_aphiaid <- unique_sp_codes %>%
      ungroup() %>%
      filter(scientificName == species) %>%
      select(scientificNameID) %>%
      unlist(use.names = F)
    
    fb_content <- species_context_info$core_info %>% filter(Species == species)
    fb_commons <- species_context_info$common_names %>% filter(Species == species)
    
    species_link_1 <- glue::glue('<a href="{paste0("https://www.marinespecies.org/aphia.php?p=taxdetails&id=", sel_aphiaid)}", target="_blank">WoRMS: {sel_aphiaid}</a>')
    species_link_2 <- glue::glue('<a href="{paste0("https://www.fishbase.se/summary/", gsub(" ", "-", species), ".html")}", target="_blank">FishBase: {fb_content$SpecCode[1]}</a>')
    
    sp_fb_common_names <- ifelse(nrow(fb_commons) > 0, paste(fb_commons$ComName, collapse = ", "), "not found")
    sp_fb_content <- fb_content$Comments

    species_info <- get_species_information(species, occurrence_ds, input$higherGeography)
  } else {
    species_name <- "Select a species to start."
    species_info <- ""
  }
  shiny::removeModal()
  shiny::showModal(
    species_gallery_modal(species_name, species_link_1, species_link_2, sp_fb_common_names, sp_fb_content)
  )

  ts <- max(sapply(species_info$DNA_sequence, nchar))

  output$species_info <- reactable::renderReactable({
    reactable::reactable(species_info, defaultPageSize = 7,
    resizable = TRUE, wrap = FALSE, bordered = TRUE, highlight = TRUE,
    striped = TRUE,
    columns = list(
     samples = colDef(name = "Samples"),
     localities = colDef(name = "Localities"), 
     target_gene = colDef(name = "Target gene"),
     reads = colDef(name = "Reads"),
     DNA_sequence = colDef(name = "DNA sequence",
       cell = function(value, index, name) {
        if (input$spi_dna_col & !input$spi_dna_back) {
          value <- gsub("A", '<span style="color: #5d1af6"; font-weight: bold;>A</span>', value)
          value <- gsub("T", '<span style="color: #f6d11a"; font-weight: bold;>T</span>', value)
          value <- gsub("G", '<span style="color: #0eab72"; font-weight: bold;>G</span>', value)
          value <- gsub("C", '<span style="color: #c50936"; font-weight: bold;>C</span>', value)
        } else if (input$spi_dna_back) {
          value <- gsub("A", '<span style="color: white; background-color: #5d1af6"; font-weight: bold;>A</span>', value)
          value <- gsub("T", '<span style="color: white; background-color: #f6d11a"; font-weight: bold;>T</span>', value)
          value <- gsub("G", '<span style="color: white; background-color: #0eab72"; font-weight: bold;>G</span>', value)
          value <- gsub("C", '<span style="color: white; background-color: #c50936"; font-weight: bold;>C</span>', value)
        }
             htmltools::HTML(value)
  }, minWidth = (ts*10), html = TRUE)),
  height = 260, theme = reactableTheme(
    backgroundColor = "rgba(0, 0, 0, 0)" # remove this line if want the table white
    ))
  })

}) %>%
  bindEvent(input$clicked_image_id, ignoreInit = T)



# DIVERSITY page -----
wd <- waiter::Waiter$new(
  id = c("tax_bar_plot", "alpha_plot", "beta_plot"),
  color = "white",
  html = htmltools::div(
    "Generating site statistics...",
    htmltools::br(), htmltools::br(),
    waiter::spin_1(), style = "color: #2780e3; font-size: 24px; font-weight: 900"
  )
)

output$tax_bar_plot <- renderPlot({
  req(input$higherGeography != "")
 #taxbarplot()  
 make_image_taxonomy(occurrence_ds, input$higherGeography, input$taxonLevelDiversity, input$plotType)}, height=400
)

# Diversity metrics
divplots <- reactive({
 req(input$higherGeography != "")
 wd$show()
 get_alpha_diversity(occurrence_ds, input$higherGeography, input$taxonLevel, input$alpha_measure, input$beta_measure)
})

output$alpha_plot <- plotly::renderPlotly({
  plotly::ggplotly(divplots()[[1]])
})

output$beta_plot <- plotly::renderPlotly({
  plotly::ggplotly(divplots()[[2]])
})



# DNA page ------
treeplot <- reactive({
  make_taxonomic_tree(occurrence_ds, input$higherGeography)
})

output$tree_plot <- renderPlot({
  treeplot()
})

taxplot <- reactive({
  make_venn_diagram_species_primers(occurrence_ds, input$higherGeography, input$taxonLevel)
})

output$markers_plot <- renderPlot({
  taxplot()
})

output$dna_statistics <- renderPrint({
  get_dna_statistics(occurrence_ds, input$higherGeography)
})



# TAXONOMY page ----
source("R/taxonomy_server.R", local = TRUE)



# SAMPLES page -----
output$samples_table <- renderReactable({
  reactable(
    samples %>% filter(site == input$higherGeography) %>% select(-site) %>% arrange(name),
    pagination = FALSE,
    showPagination = FALSE,
    defaultPageSize = 10000
  )
})

output$concentration_plot <- plotly::renderPlotly({
  plotly::ggplotly(
    ggplot() +
      geom_point(data = samples %>% filter(site == input$higherGeography), aes(x = blank, y = concentration, color = blank)) +
      theme_classic() +
      scale_color_brewer(palette = "Blues", direction = -1)
  )
})



# CLIMATE page ------
source("R/climate_server.R", local = TRUE)
```
