---
output: html_document
editor_options: 
  chunk_output_type: console
---
<!-- Done just when the server start, shared across users-->
```{r}
#| context: server-start

suppressPackageStartupMessages(library(bslib))
suppressPackageStartupMessages(library(leaflet))
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(arrow))
source("R/image-gallery.R")
source("R/occurrence.R")
source("R/species_by_site.R")
source("R/get_species_information.R")
source("R/taxonomy_figures.R")
source("R/species_diversity.R")
source("R/get_dna_statistics.R")
source("extensions/front-gallery.R")
source("R/site_details.R")
#source("R/fix_taxonomy.R")

# Small function to debug, when not in use set show=FALSE
mdebug <- function(status, show = FALSE) {if(show) message(status)}

sites_info <- read.table("data/sites_description.txt", header=T)
#occurrence <- read_occurrence_data()

message("Opening occurrence dataset...")
occurrence_ds <- open_dataset("data/output/occurrence.parquet")

unique_sp_codes <- occurrence_ds %>%
  select(scientificName, scientificNameID) %>%
  group_by(scientificName, scientificNameID) %>%
  distinct() %>%
  collect() %>%
  mutate(scientificNameID = sub(".*:", "", scientificNameID)) %>% 
  ungroup()

# Leaflet map data
# TODO: pre-do that
message("Fetching sites metadata...")
sites <- jsonlite::read_json("https://raw.githubusercontent.com/iobis/edna-tracker-data/data/generated.json")
sites_list <- sites$sites
sites_samples <- sites$samples %>% bind_rows()

sites_names <- sapply(sites_list, function(x) x$name)
sites_names <- sites_names[sites_names != "Sanganeb Marine National Park and Dungonab Bay – Mukkawar Island Marine National Park"]
sites_names <- sites_names[order(sites_names)]

samples <- sites_samples %>% 
  select(site = parent_area_name, name, blank, date = event_begin, station, volume = size)
samples$concentration <- sapply(sites_samples$dnas, function(x) x$concentration)
sample_stats <- readRDS("data/supporting_data/sample_stats.rds")
samples <- samples %>% 
  left_join(sample_stats, by = c("name" = "materialSampleID")) %>% 
  mutate(species = replace_na(species, 0))

localities <- sites_samples %>% 
  select(area_name, area_locality, parent_area_name, station, lon = area_longitude, lat = area_latitude) %>%
  group_by(area_name, area_locality, parent_area_name, station, lon, lat) %>%
  distinct(.keep_all = T) %>% 
  ungroup()

map_localities <- sites_samples %>% 
  select(name, area_name, area_locality, parent_area_name, station, lon = area_longitude, lat = area_latitude) %>%
  group_by(name, area_name, area_locality, parent_area_name, station, lon, lat) %>%
  distinct(.keep_all = T) %>%
  mutate(popup_name = paste(name, area_name)) %>% 
  ungroup()

species_context_info <- readRDS("data/fishbase.rds")

general_description <- jsonlite::read_json("data/supporting_data/general_description.json")

sites_shape <- sf::read_sf("data/supporting_data/sites.geojson")

climate_species <- open_dataset("data/species_sites_risk_full.parquet")
climate_sites <- open_dataset("data/sites_sst_all.parquet")
mdebug("server start done")
```

<!-- Shiny server component -->
```{r}
#| context: server

# HOME page ------
source("R/home_server.R", local = TRUE)

# Update inputs across pages and according to map
source("R/server_updategeography.R", local = TRUE)

# Download handlers
source("R/download_handlers.R", local = TRUE)

# Update column sizes when not on first page
observe({
  if (input$higherGeography != "") {
    session$sendCustomMessage("change_col_sizes", "change")
  } else {
    session$sendCustomMessage("change_col_sizes", "main")
  }
}) %>%
  bindEvent(input$higherGeography)

observe({
  updateSelectInput(inputId = "higherGeography", selected = "")
}) %>%
  bindEvent(input$homeTrigger)



# SPECIES page ------
source("R/species_server.R", local = TRUE)
# Image galleries
source("R/species_gallery_modal.R", local = TRUE)



# DIVERSITY page -----
source("R/diversity_server.R", local = TRUE)



# DNA page ------
# treeplot <- reactive({
#   make_taxonomic_tree(occurrence_ds, input$higherGeography)
# })

# output$tree_plot <- renderPlot({
#   treeplot()
# })

# taxplot <- reactive({
#   make_venn_diagram_species_primers(occurrence_ds, input$higherGeography, input$taxonLevel)
# })

# output$markers_plot <- renderPlot({
#   taxplot()
# })

# output$dna_statistics <- renderPrint({
#   get_dna_statistics(occurrence_ds, input$higherGeography)
# })



# TAXONOMY page ----
source("R/taxonomy_server.R", local = TRUE)



# SAMPLES page -----
output$samples_table <- renderReactable({
  reactable(
    samples %>% filter(site == input$higherGeography) %>% select(-site) %>% arrange(name),
    pagination = FALSE,
    showPagination = FALSE,
    defaultPageSize = 10000,
    columns = list(
      name = colDef(name = "Identifier", width = 100),
      station = colDef(name = "Station"),
      species = colDef(name = "Species", width = 120),
      volume = colDef(name = "Volume<br/>(mL)", width = 110, html = TRUE),
      concentration = colDef(name = "DNA Concentration<br/>(ng/µl)", html = TRUE),
      date = colDef(
        name = "Date",
        width = 140,
        cell = function(value) {
          substr(value, 1, 10)
        }
      ),
      blank = colDef(
        name = "Blank?",
        width = 80,
        cell = function(value) {
          if (value) {
            "\u2713"
          } else {
            ""
          }
        },
        align = "center"
      )
    )
  )
})

output$concentration_plot <- plotly::renderPlotly({
  plotly::ggplotly(
    ggplot() +
      geom_point(data = samples %>% filter(site == input$higherGeography), aes(x = blank, y = concentration, color = blank), shape = 21, size = 3) +
      theme_classic() +
      theme(legend.position = "none") +
      scale_color_brewer(palette = "Dark2", direction = 1) +
      scale_x_discrete(labels = c("FALSE" = "sample", "TRUE" = "blank")) +
      ylab("DNA concentration (ng/\u00b5l)") +
      xlab(FALSE)
  )
})

output$species_plot <- plotly::renderPlotly({
  plotly::ggplotly(
    ggplot() +
      geom_point(data = samples %>% filter(site == input$higherGeography), aes(x = blank, y = species, color = blank), shape = 21, size = 3) +
      theme_classic() +
      theme(legend.position = "none") +
      scale_color_brewer(palette = "Dark2", direction = 1) +
      scale_x_discrete(labels = c("FALSE" = "sample", "TRUE" = "blank")) +
      ylab("Number of species") +
      xlab(FALSE)
  )
})



# CLIMATE page ------
source("R/climate_server.R", local = TRUE)
```
