---
title: "eDNA expeditions"
format: 
  dashboard:
    expandable: false
include-in-header:
  - text: |
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Mulish:ital,wght@0,200..1000;1,200..1000&display=swap" rel="stylesheet">
theme:
  - cosmo
  - custom.scss
mainfont: Mulish
server: shiny
---

<!-- This just load/prepare -->
```{r include=FALSE}
library(shiny)
library(leaflet)
library(dplyr)

# Load json
sites <- jsonlite::read_json("https://raw.githubusercontent.com/iobis/edna-tracker-data/data/generated.json")
sites_list <- sites$sites
sites_samples <- sites$samples

sites_names <- sapply(sites_list, function(x) x$name)

localities <- sites_samples %>% bind_rows() %>% select(area_name, area_locality, parent_area_name, station, lon = area_longitude, lat = area_latitude)

groups <- read.csv("data/supporting_data/groups.csv")
groups_names <- c("all species", unique(groups$group))
```

<!-- This goes on top of the page after navbar - map-->
```{r}
#| padding: 0px
#| expandable: false
htmltools::includeCSS("styles.css")

leafletOutput("mainMap")
```


<!-- Each level 1 header becomes a page on the dashboard -->    
# Home {orientation="rows" scrolling="true"}

## {.toolbar}

```{r}
selectInput("higherGeography", "Site:", sites_names)
```

## Row 1 {.flow}

### Column 1 {width=60%}

<!-- Temporary workaround, please don't remove-->

```{=html}
<script>
// Select the parent div with the specified classes
const parentDiv = document.querySelector('.toolbar-content.html-fill-item.html-fill-container');

// Check if the parent div exists
if (parentDiv) {
  // Select the immediate child of the parent div
  const childDiv = parentDiv.firstElementChild;

  // Check if the child div exists
  if (childDiv) {
    // Remove the style attribute from the child div
    childDiv.removeAttribute('style');
  }
}
</script>
```

`r tags$div(class="site-title", textOutput("higherGeography"))`

`r tags$div(class="site-text", textOutput("siteDescription"))`

#### Row {.context-info}

`r tags$div(HTML(paste0('<span><i class="fa fa-calendar" style = "color:#3D3D3D;"></i> Event date: ', textOutput("eventDate", inline = T), '</span>')))`

`r tags$div(HTML(paste0('<span><i class="fa fa-dna" style = "color:#3D3D3D;"></i> Number of samples: ', textOutput("eventSamples", inline = T), '</span>')))`


### Column 2 {width=40% .flow}

```{r}
library(bslib)

value_box(
  title = "Number of species",
  value = textOutput("value_box_species"),
  showcase = icon("shrimp", class = 'fa-3x'),#bsicons::bs_icon("bank2"),
  theme = "bg-gradient-blue-indigo"
)

```

#### Row

```{r}

value_box(
  title = "Number of fishes",
  value = textOutput("value_box_fish"),
  showcase = icon("fish", class = 'fa-3x'),#bsicons::bs_icon("bank2"),
  theme = "bg-gradient-indigo-blue"
)
```

```{r}

value_box(
  title = "Number of mammals",
  value = textOutput("value_box_mammals"),
  showcase = icon("otter", class = 'fa-3x'),#bsicons::bs_icon("bank2"),
  theme = "bg-gradient-indigo-blue"
)
```

#### Row

```{r, file="./R/value_boxes.R"}

value_box(
  title = "IUCN threatened",
  value = textOutput("value_box_iucn"),
  showcase = icon("circle-exclamation", class = 'fa-3x'),#bsicons::bs_icon("bank2"),
  theme = "bg-gradient-blue-teal",
  full_screen = FALSE
)
```

## Row 2 {.flow}

```{r}
htmlOutput("imageGallery")
```

<br>


<!-- Orientation can be either columns or rows; each level 2 header becomes a card-->
# Taxonomy {orientation="columns" scrolling="true"}

## Column

<!-- Content can be either markdown...-->
Test page 2

## Column 

<!-- Code/output...-->
```{r}
plot(x = 1, y = 1)
```

# Diversity metrics {orientation="columns" scrolling="true"}

## Column

Test page 2

## Column 

<!-- Or a mix of both-->
Some text

```{r}
plot(x = 1, y = 1)
```

# Species {orientation="columns" scrolling="true"}

## {.toolbar}

```{r}
selectInput("higherGeography", "Site:", sites_names)

selectInput("group", "Group:", groups_names)

```


## Row

```{r}
htmlOutput("species_gallery")

```

### {.sidebar}

```{r}
textOutput("species_name")
textOutput("species_info")
```

# Sample {orientation="columns" scrolling="true"}

## Column

Test page 2

## Column 

```{r}
plot(x = 1, y = 1)
```

<!-- Done just when the server start, shared across users-->
```{r}
#| context: server-start

library(bslib)
library(leaflet)
library(shiny)
library(dplyr)
source("R/image-gallery.R")
source("R/occurrence.R")
source("R/value_boxes.R")
source("R/Species_by_site_abundance.R")

sites_info <- read.table("data/sites_description.txt", header=T)
occurrence <- read_occurrence_data()


# Leaflet map data
# TODO: pre-do that
sites <- jsonlite::read_json("https://raw.githubusercontent.com/iobis/edna-tracker-data/data/generated.json")
sites_list <- sites$sites
sites_samples <- sites$samples

sites_names <- sapply(sites_list, function(x) x$name)

localities <- sites_samples %>% 
  bind_rows() %>% 
  select(area_name, area_locality, parent_area_name, station, lon = area_longitude, lat = area_latitude) %>%
  group_by(area_name, area_locality, parent_area_name, station, lon, lat) %>%
  distinct(.keep_all = T)
```

<!-- Shiny server component -->
```{r}
#| context: server

output$mainMap <- renderLeaflet({
  leaflet(width = "100%") %>%
   addTiles(urlTemplate = "https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png") %>%
   addMarkers(~lon, ~lat, popup = ~as.character(area_name), label = ~as.character(area_name),
              layerId = ~station,
              data = localities, clusterOptions = markerClusterOptions()) %>%
   setView(0, 0, zoom = 2)
})

output$higherGeography <- renderText({
  sel_site <- sites_info[sites_info$name == input$higherGeography,]
  sel_site$name
})

output$siteDescription <- renderText({
  sel_site <- sites_info[sites_info$name == input$higherGeography,]
  sel_site$description
})

#input=list(higherGeography="Gulf of Porto: Calanche of Piana, Gulf of Girolata, Scandola Reserve", group="fish")
#input=list(higherGeography="Lagoons of New Caledonia: Reef Diversity and Associated Ecosystems")

output$eventDate <- renderText({"2024-05-01"})
output$eventSamples <- renderText({"1000"})

boxes_data <- reactiveValues()
observe({
  sel_site <- sites_info[sites_info$name == input$higherGeography,]
  boxes_data$data <- n_species(sel_site$name, occurrence)
}) %>% bindEvent(input$higherGeography)

#https://raw.githubusercontent.com/iobis/edna-tracker-data/data/generated.json

output$value_box_species <- renderText({
  boxes_data$data$n_species
})

output$value_box_fish <- renderText({
  boxes_data$data$n_fish
})

output$value_box_mammals <- renderText({
  boxes_data$data$n_mammals
})

output$value_box_iucn <- renderText({
  boxes_data$data$n_iucn
})

output$imageGallery <- renderUI({
  species = c("Trachinotus baillonii", "Anguilla rostrata", "Liparis liparis")
  generate_gallery(species, "data/images.txt")
})


species_list <- reactive({
    generate_ordered_species_list_bySite(input$higherGeography, occurrence, input$group)
  })

output$species_gallery <- renderUI({
    generate_gallery(species_list()$scientificName, "data/images.txt", max_image_height = "250px",max_image_width = "200px", image_gap = "0.1em") 
    })

observe({
    # Get the species list
    list_of_species <- species_list()
    
    # Create observeEvent handlers for each species
    lapply(seq_len(nrow(list_of_species)), function(i) {
      species <- list_of_species$scientificName[i]
      link_id <- paste0("link_", gsub(" ", "_", species))
      
      # Set up observeEvent for the link_id
      observeEvent(input[[link_id]], {
        updateSidebar(species, paste("Information about", species))
      }, ignoreInit = TRUE)
    })
  }) %>% bindEvent(input$higherGeography, input$group, ignoreInit = T)


  updateSidebar <- function(species_name, species_info) {
    output$species_name <- renderText({species_name})
    output$species_info <- renderText({species_info})
  }

# Map input changes ----
map_info <- reactive({
  if (!is.null(input$mainMap_marker_click)) {
    click <- input$mainMap_marker_click
    if (!is.null(click$id)) {
      locs <- localities[!is.na(localities$station),]
      loc_sel <- locs[locs$station == click$id, ]
      loc_sel <- loc_sel[loc_sel$lon == click$lng & loc_sel$lat == click$lat,]
      loc_sel
    } else {
      NULL
    }
  } else {
    NULL
  }
})

observe({
  updateVarSelectInput(session, "higherGeography", selected = map_info()$parent_area_name[1])
}) %>%
  bindEvent(map_info())

observe({
  proxy <- leafletProxy("mainMap")
  
  sel_loc <- localities[localities$parent_area_name == input$higherGeography,]
  sel_loc <- sel_loc[!is.na(sel_loc$lon) & !is.na(sel_loc$lat),]
  
  if (nrow(sel_loc) > 0) {
    proxy %>% flyToBounds(lng1 = min(sel_loc$lon), lat1 = min(sel_loc$lat),
                          lng2 = max(sel_loc$lon), lat2 = max(sel_loc$lat))
  }
}) %>%
  bindEvent(input$higherGeography, ignoreInit = T)

```

